<?xml version="1.0" encoding="UTF-8"?>
<!--
~ Copyright 2002-2010 the original author or authors.
~
~ Licensed under the Apache License, Version 2.0 (the "License");
~ you may not use this file except in compliance with the License.
~ You may obtain a copy of the License at
~
~ http://www.apache.org/licenses/LICENSE-2.0
~
~ Unless required by applicable law or agreed to in writing, software
~ distributed under the License is distributed on an "AS IS" BASIS,
~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~ See the License for the specific language governing permissions and
~ limitations under the License.
-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:si="http://www.springframework.org/schema/integration"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/integration
			http://www.springframework.org/schema/integration/spring-integration-2.0.xsd">

  <!--According to http://www.powertac.org/wiki/index.php/Game_Design#Execution-->
  <!--TODO:Entry point (channel adapter) for cron job-->
  <!--TODO:Price changes are communicated to Customers.(?)-->

  <!--Customers retrieve Physical Environment conditions.-->
  <!--1. Publish TimeslotUpdateCommand to all brokers-->
  <si:service-activator ref="brokerManagementService" method="broadcastMessage" input-channel="CcTimeslotChangedChannel"/>

  <!--2. Tariff Handling-->
  <!--Ask the accounting service for the current tariff list-->
  <si:publish-subscribe-channel id="AsTariffPublishedChannel"/>
  <si:service-activator ref="accountingService" method="publishTariffList"
                     input-channel="CcTimeslotChangedChannel"
                     output-channel="AsTariffPublishedChannel"/>

  <!--2.1 Publish list of TariffPublishedCommands to all brokers -->
  <si:service-activator ref="brokerManagementService" method="broadcastMessage" input-channel="AsTariffPublishedChannel"/>

  <!--2.2. Allow customers to decide if they want to subscribe or negotiate-->
  <si:channel id="CuTariffReplyCommandsChannel"/>
  <si:service-activator ref="customer" method="processTariffList"
                     input-channel="AsTariffPublishedChannel" output-channel="CuTariffReplyCommandsChannel"/>

  <!--2.2.1. Validate every reply using the TariffRuleEnforcer-->
  <!--In order to do so, the message list in CuTariffReplyCommandsChannel is split into single messages first-->
  <si:channel id="CuTariffReplyChannel"/>
  <si:splitter input-channel="CuTariffReplyCommandsChannel" output-channel="CuTariffReplyChannel"/>

  <!--2.2.2. Use a filter to validate each reply-->
  <si:channel id="CuTariffReplyCommandAcceptedChannel"/>
  <si:channel id="CuTariffReplyCommandRejectedChannel"/>
  <si:filter input-channel="CuTariffReplyChannel" output-channel="CuTariffReplyCommandAcceptedChannel"
          discard-channel="CuTariffReplyCommandRejectedChannel" ref="tariffRuleEnforcer"/>

  <!--2.2.2.1. Process validated TariffReply objects and send them to their respective broker-->
  <si:channel id="CuBrTariffReplyChannel"/>
  <si:service-activator ref="accountingService" method="processTariffReply"
                     input-channel="CuTariffReplyCommandAcceptedChannel"
                     output-channel="CuBrTariffReplyChannel"/>
  <!--2.2.2.1.1-->
  <si:service-activator ref="brokerManagementService" method="broadcastMessage" input-channel="CuBrTariffReplyChannel"/>

  <!--2.2.2.2-->
  <!--TODO: Process rejected TariffReply objects from the discarded-channel (notify sender (customer))-->

  <!--3. Process deactivated timeslot-->
  <si:publish-subscribe-channel id="CcFilteredTimeslotChangedChannel" apply-sequence="true"/>
  <si:filter input-channel="CcTimeslotChangedChannel" output-channel="CcFilteredTimeslotChangedChannel"
          expression="payload.enabled"/>

  <!--3.1. Get real weather data from the physical environment-->
  <si:publish-subscribe-channel id="PeWeatherRealDataChannel"/>
  <si:service-activator ref="physicalEnvironment" method="generateRealWeatherData"
                     input-channel="CcFilteredTimeslotChangedChannel"
                     output-channel="PeWeatherRealDataChannel"/>

  <!--3.2. First, publish weather data to all brokers-->
  <si:service-activator ref="brokerManagementService" method="broadcastMessage" input-channel="PeWeatherRealDataChannel"/>

  <!--3.3. Second, get meter reading from all customers for the given weather data (which includes the reference to the timeslot-->
  <si:channel id="CcCuMeterReadingChannel"/>
  <si:service-activator ref="customer" method="generateMeterReading"
                     input-channel="PeWeatherRealDataChannel"
                     output-channel="CcCuMeterReadingChannel"/>

  <!--3.4. Wait for all customer modules to report their readings and collect them-->
  <si:channel id="CuAsMeterReadingCommandsChannel"/>
  <si:aggregator input-channel="CcCuMeterReadingChannel" output-channel="CuAsMeterReadingCommandsChannel"/>

  <!--3.5 Have the Accounting Service process the meter readings. Everyone can subscribe to receive the output-->
  <si:publish-subscribe-channel id="AsMeterReadingBalanceCommandsChannel"/>
  <si:service-activator ref="accountingService" method="processMeterReadings"
                     input-channel="CuAsMeterReadingCommandsChannel"
                     output-channel="AsMeterReadingBalanceCommandsChannel"/>

  <!--3.5.1 Send the processed meter reading (=balance) to the appropriate broker-->
  <si:channel id="AsBrMeterReadingBalanceChannel"/>
  <si:splitter input-channel="AsMeterReadingBalanceCommandsChannel"
            output-channel="AsBrMeterReadingBalanceChannel"/>
  <si:service-activator ref="brokerManagementService" method="broadcastMessage"
                     input-channel="AsBrMeterReadingBalanceChannel"/>

  <!--3.5.2 Have the Distribution Utility process the meter balances. A list of cash/depot updates will be returned-->
  <si:channel id="DuAsCashAndDepotUpdateCommandsChannel"/>
  <si:service-activator ref="distributionUtility" method="processMeterReadingBalances"
                     input-channel="AsMeterReadingBalanceCommandsChannel"
                     output-channel="DuAsCashAndDepotUpdateCommandsChannel"/>

  <!--3.5.2.1 Split the depot/cash update commands and route them based on their type-->
  <si:channel id="DuAsCashOrDepotUpdateChannel"/>
  <si:channel id="DuAsCashUpdateChannel"/>
  <si:channel id="DuAsDepotUpdateChannel"/>
  <si:splitter input-channel="DuAsCashAndDepotUpdateCommandsChannel"
            output-channel="DuAsCashOrDepotUpdateChannel"/>
  <si:payload-type-router input-channel="DuAsCashOrDepotUpdateChannel">
    <si:mapping type="org.powertac.common.commands.CashUpdate" channel="DuAsCashUpdateChannel"/>
    <si:mapping type="org.powertac.common.commands.DepotUpdate" channel="DuAsDepotUpdateChannel"/>
  </si:payload-type-router>

  <!--3.5.2.2 Call the appropriate cash/depot update method of the Accounting Service -->
  <si:channel id="AsBrCashAndDepotUpdateChannel"/>
  <si:service-activator ref="accountingService" method="processCashUpdate"
                     input-channel="DuAsCashUpdateChannel"
                     output-channel="AsBrCashAndDepotUpdateChannel"/>

  <si:service-activator ref="accountingService" method="processDepotUpdate"
                     input-channel="DuAsDepotUpdateChannel"
                     output-channel="AsBrCashAndDepotUpdateChannel"/>

  <!--3.5.2.3. Forward any update command to the broker-->
  <si:service-activator ref="brokerManagementService" method="broadcastMessage"
                     input-channel="AsBrCashAndDepotUpdateChannel"/>

  <!--4. Publish weather forecasts for every enabled timeslot-->
  <si:publish-subscribe-channel id="PeWeatherForecastDataChannel"/>
  <si:service-activator ref="physicalEnvironment" method="generateForecastWeatherData"
                     input-channel="CcTimeslotChangedChannel"
                     output-channel="PeWeatherForecastDataChannel"/>

  <!--4.1. Send the forecast list to all brokers-->
  <si:service-activator ref="brokerManagementService" method="broadcastMessages" input-channel="PeWeatherForecastDataChannel"/>

  <!--4.2. Send the forecast list to all customers-->
  <si:service-activator ref="customer" method="processWeatherForecasts" input-channel="PeWeatherForecastDataChannel"/>


</beans>