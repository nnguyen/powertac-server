<?xml version="1.0" encoding="UTF-8"?>
<!--
~ Copyright 2002-2010 the original author or authors.
~
~ Licensed under the Apache License, Version 2.0 (the "License");
~ you may not use this file except in compliance with the License.
~ You may obtain a copy of the License at
~
~ http://www.apache.org/licenses/LICENSE-2.0
~
~ Unless required by applicable law or agreed to in writing, software
~ distributed under the License is distributed on an "AS IS" BASIS,
~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~ See the License for the specific language governing permissions and
~ limitations under the License.
-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:si="http://www.springframework.org/schema/integration"
       xmlns:si-xml="http://www.springframework.org/schema/integration/xml"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/integration
			http://www.springframework.org/schema/integration/spring-integration-2.0.xsd
			http://www.springframework.org/schema/integration/xml
			http://www.springframework.org/schema/integration/xml/spring-integration-xml-2.0.xsd">

  <!--Explicitly reference other configuration files-->
  <import resource="execution.xml"/>
  <import resource="shout.xml"/>
  <import resource="tariff.xml"/>

  <!--Configure bean aliases for proper naming within the configuration files-->
  <alias name="physicalEnvironmentService" alias="physicalEnvironment"/>
  <alias name="distributionUtilityService" alias="distributionUtility"/>

  <!--Auctioneer related messaging architecture-->

  <!--Demo gateway for testing purposes that can receive incoming messages-->
  <si:gateway service-interface="org.powertac.server.IStringMessageService"
              id="demoMessagingGateway"
              default-request-channel="BrIncomingXml"/>

  <si:channel id="BrIncomingXml"/>

  <!--Define (un)marshalling rules-->
  <bean id="xmlUnMarshaller" class="org.springframework.oxm.xstream.XStreamMarshaller">
    <property name="converters">
      <list>
        <bean class="org.powertac.server.converter.ShoutDoCreateCmdConverter"/>
      </list>
    </property>
    <property name="aliases">
      <props>
        <prop key="shoutDoCreate">org.powertac.common.command.ShoutDoCreateCmd</prop>
        <prop key="shoutDoDelete">org.powertac.common.command.ShoutDoDeleteCmd</prop>
        <prop key="shoutDoUpdate">org.powertac.common.command.ShoutDoUpdateCmd</prop>
      </props>
    </property>
    <property name="mode" value="1001"/>
    <!--1001=NO_REFERENCES, 1002=ID_REFERENCES -->
  </bean>

  <!--Map XML to domain class-->
  <si-xml:unmarshalling-transformer unmarshaller="xmlUnMarshaller" input-channel="BrIncomingXml"
                                    output-channel="BrIncoming"/>

  <si:publish-subscribe-channel id="BrIncoming"/>

  <!--Route domain class to different channels-->
  <si:payload-type-router input-channel="BrIncoming">
    <si:mapping type="org.powertac.common.command.ShoutDoCreateCmd" channel="BrIncomingShoutDoCreate"/>
    <si:mapping type="org.powertac.common.command.ShoutDoDeleteCmd" channel="BrIncomingShoutDoDelete"/>
    <si:mapping type="org.powertac.common.command.ShoutDoUpdateCmd" channel="BrIncomingShoutDoUpdate"/>
  </si:payload-type-router>

  <!-- ===== -->
  <!--Module processing here in other xml files-->
  <!-- ===== -->

  <si:channel id="BrIncomingCommandProcessed"/>

  <!--Check result type. If result is list, route it to a splitter. Otherwise route message directly to next router-->
  <si:payload-type-router input-channel="BrIncomingCommandProcessed"
                          default-output-channel="BrIncomingCommandProcessedSingle">
    <si:mapping type="java.util.List" channel="BrIncomingCommandProcessedList"/>
  </si:payload-type-router>

  <!--Split result list-->
  <si:splitter input-channel="BrIncomingCommandProcessedList" output-channel="BrIncomingCommandProcessedSingle"/>

  <si:channel id="BrIncomingCommandProcessedSingle"/>

  <!--Route single result by domain class type. Possible types defined in Auctioneer interface-->
  <si:payload-type-router input-channel="BrIncomingCommandProcessedSingle">
    <si:mapping type="org.powertac.common.command.CashDoUpdateCmd" channel="ProcessCashDoUpdateCmd"/>
    <si:mapping type="org.powertac.common.command.PositionDoUpdateCmd" channel="ProcessPositionDoUpdateCmd"/>
    <si:mapping type="org.powertac.common.Orderbook" channel="BrOutgoingAll"/>
    <si:mapping type="org.powertac.common.TransactionLog" channel="BrOutgoingAll"/>
    <si:mapping type="org.powertac.common.Shout" channel="BrOutgoingSingle"/>
  </si:payload-type-router>

  <!--Process CashDoUpdateCmd objects. This additional processing in contrast to Orderbook/TransactionLog/Shout objects-->
  <!--is necessary because a Cmd object needs to be processed by some entity (i.e. Accounting Service) that -->
  <!--will return the domain class object (i.e. CashUpdate) which is to be communicated to broker(s)-->
  <si:channel id="ProcessCashDoUpdateCmd"/>

  <si:service-activator ref="accountingService" method="processCashUpdate"
                        input-channel="ProcessCashDoUpdateCmd" output-channel="BrOutgoingSingle"/>

  <!--Process PositionDoUpdateCmd objects. Additional processing required for the same reason as above-->
  <si:channel id="ProcessPositionDoUpdateCmd"/>

  <si:service-activator ref="accountingService" method="processPositionUpdate"
                        input-channel="ProcessPositionDoUpdateCmd" output-channel="BrOutgoingSingle"/>

  <!--Channel to send message to single broker specified within the object-->
  <si:channel id="BrOutgoingSingle"/>
  <!--Channel to send message to all brokers-->
  <si:channel id="BrOutgoingAll"/>

  <si:service-activator ref="brokerManagementService" method="sendMessage"
                        input-channel="BrOutgoingSingle"/>

  <si:service-activator ref="brokerManagementService" method="broadcastMessage"
                        input-channel="BrOutgoingAll"/>
  <!-- ==================== -->
  <!--Old stuff:-->

  <si:service-activator id="localService" method="store" input-channel="BrIncoming"
                        ref="timeslotManagementService"/>

  <si:gateway service-interface="org.powertac.server.ICommandEncodingService" id="commandEncode"
              default-request-channel="incomingShoutCmd"/>

  <si:channel id="incomingShoutCmd"/>

  <si-xml:marshalling-transformer marshaller="xmlUnMarshaller" input-channel="incomingShoutCmd"
                                  output-channel="shout"/>
  <si:service-activator method="handleShout" input-channel="shout" ref="timeslotManagementService"/>
</beans>